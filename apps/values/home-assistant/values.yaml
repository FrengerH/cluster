image:
  pullPolicy: IfNotPresent
  repository: ghcr.io/home-assistant/home-assistant
  tag: "2025.9.1"

service:
  type: ClusterIP
  port: 8080

# Kubernetes Ingress
ingress:
  enabled: true
  className: traefik

  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"

  ## Configure the hosts for the ingress
  hosts: 
    - host: <path:ha-config#domain>
      paths:
        - path: /
          pathType: ImplementationSpecific

  tls:
    - hosts:
        - <path:ha-config#domain>
      secretName: tls-home-assistant-ingress

persistence:
  enabled: true
  size: 5Gi
  storageClass: longhorn
  accessMode: ReadWriteOnce

configuration:
  enabled: true
  forceInit: true
  trusted_proxies:
    - 10.42.0.0/16
  initScript: |-
    #!/bin/bash
    set -e

    # Check if the configuration file exists
    if [ ! -f /config/configuration.yaml ]; then
      echo "Configuration file not found, creating a new one"
      cp /config-templates/configuration.yaml /config/configuration.yaml
    fi

    # Check if the force init is enabled
    forceInit="{{ .Values.configuration.forceInit }}"
    if [ "$forceInit" = "true" ]; then
      echo "Force init is enabled, overwriting the configuration file"
      current_time=$(date +%Y%m%d_%H%M%S)
      echo "Backup the current configuration file to configuration.yaml.$current_time"
      cp /config/configuration.yaml /config/configuration.yaml.$current_time
      echo "Before cleanup - all backup files:"
      ls -l /config/configuration.yaml.*
      echo "Cleaning up - keeping only 10 most recent backups..."
      ls -t /config/configuration.yaml.* 2>/dev/null | tail -n +11 | xargs -r rm
      echo "After cleanup - remaining backup files:"
      ls -l /config/configuration.yaml.*
      echo "The current configuration file will be merged with the default configuration file with this content:"
      cat /config-templates/configuration.yaml
      if [[ ! -s /config/configuration.yaml ]]; then
        # If /config/configuration.yaml is empty, use the content of /config-templates/configuration.yaml
        cat /config-templates/configuration.yaml > /config/configuration.yaml
      else
        # Perform the merge operation if /config/configuration.yaml is not empty
        yq eval-all --inplace 'select(fileIndex == 0) *d select(fileIndex == 1)' /config/configuration.yaml /config-templates/configuration.yaml
      fi
    fi

    # Check if the automations file exists
    if [ ! -f /config/automations.yaml ]; then
      echo "Automations file not found, creating a new one"
      touch /config/automations.yaml
      echo "[]" >> /config/automations.yaml
    fi

    # Check if the scripts file exists
    if [ ! -f /config/scripts.yaml ]; then
      echo "Scripts file not found, creating a new one"
      touch /config/scripts.yaml
    fi

    # Check if the scenes file exists
    if [ ! -f /config/scenes.yaml ]; then
      echo "Scenes file not found, creating a new one"
      touch /config/scenes.yaml
    fi

    mkdir -p /config/custom_components

    if [ ! -d /config/custom_components/hacs ]; then
      echo "Installing HACS..."
      apk add --no-cache bash curl unzip
      wget -O - https://get.hacs.xyz | bash
    fi

replicaCount: 1
